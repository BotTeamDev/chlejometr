scalar Date

schema {
  query: Query
  mutation: Mutation
}

type Query {
  users:[User]
  """ specific user, use email or id"""
  user(email:String id: String): User

  parties: [Party]
  party(partyId: String!): Party

  shots(partyId: String!): [Shot]
}

type Mutation {
  registerUser(username: String! email: String! password: String!): LoginResponse
  loginUser(email: String! password: String!): LoginResponse
  uppdateUserData(
      email: String
      username: String
      weight: Float
      gender: String
      height: Float
      age: Float
      private: Boolean
    ):Boolean

  createParty( name: String! ): Boolean
  joinParty( partyId: String! ): Boolean
  endParty( partyId: String! ): Boolean

  addShot(partyId:String!, size: Float!, percent: Float!): Boolean
}

""" user """
type User {
  _id: String
  email: String
  username: String
  weight: Float
  gender: String
  height: Float
  age: Float
  isPrivate: Boolean
  parties: [Party]
  friends: [User]
}

""" party """
type Party {
  _id: String
  name: String
  owner: User
  isPartyOver: Boolean
  members: [User]
  membersShots: [MembersShots]
}

""" Shots drinked by specific user """
type MembersShots {
  user: User
  shots: [Shot]
}

""" Drinked shots """
type Shot {
  percent: Float
  """size in ml"""
  size: Float
  date: Date
}

""" Response after login or register """
type LoginResponse {
  status: String
  username: String
  email: String
}